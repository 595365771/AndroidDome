<?xml version="1.0" encoding="utf-8"?>
<layout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools">

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:background="@color/colorWhite"
        android:scrollbars="none">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:background="@color/colorWhite"
            android:orientation="vertical"
            android:padding="10dp"
            tools:context="com.blackcat.example.ui.touchevent.TouchEventActivity">

            <TextView
                style="@style/normal_333_16"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="进程和线程" />

            <TextView
                style="@style/normal_333_14"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="10dp"
                android:text="进程是处于运行中的程序，并且具有一定的独立性，是系统进行资源分配和调度的一个独立单位。" />

            <TextView
                style="@style/normal_333_14"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="5dp"
                android:text="一般包含如下三个特征：" />

            <TextView
                style="@style/normal_333_14"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="5dp"
                android:text="1、独立性：进程是系统中独立存在的实体，它可以拥有自己独立的资源，每一个进程都拥有自己私有的地址空间，在没有经过进程本身允许的情况下一个用户进程不能直接访问其他进程 。" />

            <TextView
                style="@style/normal_333_14"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="5dp"
                android:text="2、动态性：和程序相比进程有自己的生命周期和各种不同的状态。" />

            <TextView
                style="@style/normal_333_14"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="5dp"
                android:text="3、并发性：多个进程可以在单个处理器上并发执行，多个进程之间不会互相影响。（理论上一个CPU同一时间只能有一个进程在执行，不断在这些进程之间轮换执行）" />

            <TextView
                style="@style/normal_333_14"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="10dp"
                android:text="线程是进程的组成部分，一个进程可以拥有多个线程，一个线程必须拥有一个父进程。线程可以拥有自己的堆栈、自己的程序计数器和自己的局部变量，但不拥有系统资源，它和进程的其他线程共享该进程的资源。这样使变成更方便，但必须更加小心，因为要确保线程不会影响同一进程里面的其他线程。" />

            <View
                style="@style/horizontalLine_1dp"
                android:layout_marginBottom="20dp"
                android:layout_marginTop="20dp" />

            <TextView
                style="@style/normal_333_16"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="线程的三种创建方式" />

            <TextView
                style="@style/normal_333_14"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="5dp"
                android:text="1、继承Thread类创建线程。" />

            <Button
                android:id="@+id/btn_mythread"
                style="@style/normal_333_14"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_gravity="center_vertical"
                android:layout_marginTop="5dp"
                android:text="点击执行" />

            <TextView
                style="@style/normal_333_14"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="5dp"
                android:text="2、实现Runnable接口创建线程。" />

            <Button
                android:id="@+id/btn_myrunnable"
                style="@style/normal_333_14"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_gravity="center_vertical"
                android:layout_marginTop="5dp"
                android:text="点击执行" />

            <TextView
                style="@style/normal_333_14"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="5dp"
                android:text="3、实使用Callable和Future创建线程" />

            <Button
                android:id="@+id/btn_mycallable"
                style="@style/normal_333_14"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_gravity="center_vertical"
                android:layout_marginTop="5dp"
                android:text="点击执行" />

            <TextView
                style="@style/normal_333_16"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="10dp"
                android:text="三种创建方式的对比" />

            <TextView
                style="@style/normal_333_14"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="10dp"
                android:text="采用Runnable和Callable接口方式创建优缺点：" />

            <TextView
                style="@style/normal_333_14"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="5dp"
                android:text="1、线程类只实现了Runnable或Callable接口还能继承其他类" />

            <TextView
                style="@style/normal_333_14"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="5dp"
                android:text="2、多个线程可以同享一个target对象，非常适合多个相同线程来处理同一份资源，从而可以将CPU、代码、和数据分开，形成清晰的模型较好的提现了面向对象的思想" />

            <TextView
                style="@style/normal_333_14"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="5dp"
                android:text="3、劣势是编程比较复杂，如果要访问当前线程必须使用Tread.currentTread()方法" />

            <TextView
                style="@style/normal_333_14"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="10dp"
                android:text="采用继承Tread类的方式创建多线程的优缺点：" />

            <TextView
                style="@style/normal_333_14"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="10dp"
                android:text="1、已经继承了Tread不能再继承其他类" />

            <TextView
                style="@style/normal_333_14"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="10dp"
                android:text="2、优势是编写简单，访问当前线程直接使用this就可以了。" />

            <View
                style="@style/horizontalLine_1dp"
                android:layout_marginBottom="20dp"
                android:layout_marginTop="20dp" />

            <TextView
                style="@style/normal_333_16"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="线程的生命周期" />

            <TextView
                style="@style/normal_333_14"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="10dp"
                android:text="新建状态" />

            <TextView
                style="@style/normal_333_14"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="5dp"
                android:text="当程序使用new关键字创建了一个线程后线程就处于新建状态，这时和其他Java类一样，虚拟机只为其分配内存空间，初始化其成员变量的值，线程对象没有表现出任何线程的动态特征，程序也不会执行线程的执行体" />

            <TextView
                style="@style/normal_333_14"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="10dp"
                android:text="就绪状态" />

            <TextView
                style="@style/normal_333_14"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="5dp"
                android:text="线程对象调用 了Start()方法后线程处于就绪状态，虚拟节会为其创建方法调用栈和程序计数器，处于这个状态的线程还没有开始运行，只是表示可以开始运行了，何时运行取决于JVM里线程调度器的调度。\n注意：\n1、启动线程不能直接调用线程run()方法，否则系统会把线程对象当成一个普通的对象。\n2、已经启动的线程不能再调用start()方法" />

            <TextView
                style="@style/normal_333_14"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="10dp"
                android:text="运行状态" />

            <TextView
                style="@style/normal_333_14"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="5dp"
                android:text="线程对象调用 了Start()方法后线程处于就绪状态，虚拟节会为其创建方法调用栈和程序计数器，处于这个状态的线程还没有开始运行，只是表示可以开始运行了，何时运行取决于JVM里线程调度器的调度。\n注意：\n1、启动线程不能直接调用线程run()方法，否则系统会把线程对象当成一个普通的对象。\n2、已经启动的线程不能再调用start()方法" />

            <TextView
                style="@style/normal_333_14"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="10dp"
                android:text="阻塞状态" />

            <TextView
                style="@style/normal_333_14"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="5dp"
                android:text="1、线程调用了sleep()方法主动放弃所占用的处理器资源\n2、线程调用了一个阻塞式的IO方法，在该方法返回之前，该线程处于阻塞状态\n3、线程视图获得一个同步监视器，但是该监视器被其他线程持有\n4、线程在等待某个通知（notify）\n5、程序调用了线程的suspend方法将线程挂起，这个方法容易造成死锁，所以尽量避免使用。（使用resume()方法后进入就绪状态）" />

            <TextView
                style="@style/normal_333_14"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="5dp"
                android:text="当前正在执行的线程被阻塞后，其他线程会获得执行的机会，被阻塞的线程会在合适的时候进去就绪状态，而不是运行状态，也就是说被阻塞的线程，解除阻塞后必须等待线程调取器再次调度它" />
            <TextView
                style="@style/normal_333_14"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="10dp"
                android:text="线程死亡" />

            <TextView
                style="@style/normal_333_14"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="5dp"
                android:text="1、run()或call()方法执行完，线程正常结束\n2、线程抛出一个未捕获的Exception或Error\n3、直接调用线程的stop()方法结束线程，容易导致死锁，不推荐使用\n注意：\n1、主线程死亡后其他线程不受影响，一旦子线程启动起来就和主线程拥有一样的地位\n2、线程死亡后不能再调用start()方法来从新启动"/>
        </LinearLayout>
    </ScrollView>
</layout>